apply plugin: "kotlinx-atomicfu"

def getHostName() {
    def target = System.getProperty("os.name")
    if (target == 'Linux') return 'linux'
    if (target.startsWith('Windows')) return 'windows'
    if (target.startsWith('Mac')) return 'macos'
    return 'unknown'
}

/**
 * Disable cross compilation for missing cinterop.
 * @param targets
 */
def disableCompilation(targets) {
    configure(targets) {
        compilations.all {
            cinterops.all { project.tasks[interopProcessingTaskName].enabled = false }
            compileKotlinTask.enabled = false
        }
        binaries.all { linkTask.enabled = false }

        mavenPublication { publicationToDisable ->
            tasks.withType(AbstractPublishToMaven).all {
                onlyIf { publication != publicationToDisable }
            }
            tasks.withType(GenerateModuleMetadata).all {
                onlyIf { publication.get() != publicationToDisable }
            }
        }
    }
}

def excludeDarwinMobile = [
    'ktor-client-curl'
].contains(project.name)

kotlin {
    linuxX64()
    macosX64()
    mingwX64()

    if (!excludeDarwinMobile) {
        iosArm64()
        iosArm32()
        iosX64()
        tvosArm64()
        tvosX64()
        watchosArm32()
        watchosArm64()
        watchosX86()
    }

    targets {
        project.ext.nativeTargets = [macosX64, linuxX64, mingwX64]
        if (!excludeDarwinMobile) {
            project.ext.nativeTargets = [
                iosX64, iosArm64, iosArm32,
                macosX64, linuxX64, mingwX64,
                tvosArm64, tvosX64,
                watchosArm32, watchosArm64, watchosX86
            ]
        }

        def crossCompileTargets = [linuxX64, macosX64, mingwX64]
        def host = getHostName()
        switch (host) {
            case 'linux':
                crossCompileTargets.remove(linuxX64)
                break
            case 'windows':
                crossCompileTargets.remove(mingwX64)
                break
            case 'macos':
                crossCompileTargets.remove(macosX64)
                break
        }
        disableCompilation(crossCompileTargets)
        configure([mingwX64Test]) {
            environment "PATH": "C:\\msys64\\mingw64\\bin;C:\\Tools\\msys64\\mingw64\\bin"
        }

        project.ext.nativeCompilations = project.ext.nativeTargets.collect { it.compilations.main }
    }

    def preset = project.ext.isMacosHost ? kotlin.presets.macosX64 : kotlin.presets.linuxX64
    createUmbrellaSourceSets("posix", project.ext.nativeTargets, preset)

    sourceSets {
        posixMain.dependencies {
            implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-native', version: coroutines_version
            implementation "org.jetbrains.kotlinx:atomicfu:$atomicfu_version"
        }

        posixMain { dependsOn commonMain }
    }
}

project.ext.set("hasNative", true)
